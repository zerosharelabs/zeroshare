generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Secret {
  id                  String    @id @default(cuid())
  linkId              String    @unique
  encryptedData       String
  passwordHash        String?
  passwordAttempts    Int       @default(0)
  maxPasswordAttempts Int       @default(3)
  iv                  String
  createdAt           DateTime  @default(now())
  expiresAt           DateTime
  lastAccessedAt      DateTime?
  accessAttempts      Int       @default(0)
  maxAccessAttempts   Int       @default(1)
  updatedAt           DateTime? @updatedAt
  userId              String?
  accountId           String?
  type                String    @default("text")
  account             Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([linkId])
  @@map("secret")
}

model Statistic {
  id    String @id @default(cuid())
  name  String @unique
  value Int

  @@map("statistic")
}

model User {
  id            String       @id
  name          String
  email         String       @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  isAnonymous   Boolean?
  accounts      Account[]
  invitations   Invitation[]
  members       Member[]
  secrets       Secret[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  secrets               Secret[]

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id
  name        String
  slug        String?      @unique
  logo        String?
  createdAt   DateTime
  metadata    String?
  plan        String       @default("free")
  invitations Invitation[]
  members     Member[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}
